Terminals unused in grammar

   DQ_MARK
   EXC_MARK
   STR_VAL
   COMMENT
   NULL_T
   COMMA
   LOGICAL_AND
   LOGICAL_OR
   MOD
   GLOBAL_T


State 0 conflicts: 17 shift/reduce
State 18 conflicts: 18 shift/reduce
State 29 conflicts: 1 shift/reduce
State 43 conflicts: 1 shift/reduce
State 69 conflicts: 2 reduce/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 84 conflicts: 1 shift/reduce
State 85 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 104 conflicts: 17 shift/reduce
State 112 conflicts: 17 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce, 1 reduce/reduce
State 123 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce, 1 reduce/reduce
State 127 conflicts: 1 shift/reduce
State 135 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce
State 142 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: line
    2        | function_definition
    3        | program line
    4        | program function_definition

    5 line: switchLines
    6     | math_statement '\n'
    7     | assign_statement SEMICOLON
    8     | bool_statement
    9     | while_statement
   10     | if_statement
   11     | for_statement
   12     | return_statement SEMICOLON
   13     | break_statement
   14     | continue_statement
   15     | PRINT_T LP IDENTIFIER RP SEMICOLON
   16     | "hello msg" '\n'
   17     | error '\n'

   18 lines: line
   19      | lines line

   20 assign_statement: IDENTIFIER ASSIGN math_statement
   21                 | IDENTIFIER ASSIGN function_employ
   22                 | IDENTIFIER ASSIGN bool_statement
   23                 | IDENTIFIER INCREASE
   24                 | IDENTIFIER DECREASE

   25 math_statement: NUM
   26               | IDENTIFIER
   27               | function_employ
   28               | math_statement ADD math_statement
   29               | math_statement SUB math_statement
   30               | math_statement MUL math_statement
   31               | math_statement DIV math_statement
   32               | LP math_statement RP
   33               | SUB math_statement

   34 bool_statement: TRUE_T
   35               | FALSE_T
   36               | math_statement GT math_statement
   37               | math_statement LT math_statement
   38               | math_statement EQ math_statement
   39               | math_statement GE math_statement
   40               | math_statement LE math_statement
   41               | math_statement NE math_statement

   42 TypeForParam: INT_TYPE
   43             | FLOAT_TYPE
   44             | DOUBLE_TYPE
   45             | BOOL_TYPE
   46             | STRING_TYPE

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block
   48                    | FUNCTION IDENTIFIER LP RP block

   49 function_employ: IDENTIFIER LP math_statement RP
   50                | IDENTIFIER LP bool_statement RP

   51 return_statement: RETURN_T math_statement
   52                 | RETURN_T bool_statement

   53 if_statement: IF LP bool_statement RP switchLines block
   54             | IF LP bool_statement RP switchLines block switchLines ELSE switchLines block
   55             | IF LP bool_statement RP switchLines block switchLines elsif_list
   56             | IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

   57 elsif_list: elsif
   58           | elsif_list elsif

   59 elsif: ELSIF LP bool_statement RP switchLines block switchLines

   60 while_statement: WHILE LP bool_statement RP switchLines block

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

   62 switchLines: switchLines '\n'
   63            | '\n'
   64            | %empty

   65 block: LC lines RC
   66      | LC RC

   67 break_statement: BREAK SEMICOLON

   68 continue_statement: CONTINUE SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 6 16 17 62 63
error (256) 17
NUM (258) 25
IDENTIFIER (259) 15 20 21 22 23 24 26 47 48 49 50
"hello msg" (260) 16
INT_TYPE (261) 42
FLOAT_TYPE (262) 43
DOUBLE_TYPE (263) 44
BOOL_TYPE (264) 45
STRING_TYPE (265) 46
DQ_MARK (266)
EXC_MARK (267)
INCREASE (268) 23
DECREASE (269) 24
STR_VAL (270)
PRINT_T (271) 15
COMMENT (272)
FUNCTION (273) 47 48
IF (274) 53 54 55 56
ELSE (275) 54 56
ELSIF (276) 59
WHILE (277) 60
FOR (278) 61
RETURN_T (279) 51 52
BREAK (280) 67
CONTINUE (281) 68
NULL_T (282)
LC (283) 65 66
RC (284) 65 66
SEMICOLON (285) 7 12 15 61 67 68
COMMA (286)
ASSIGN (287) 20 21 22
LOGICAL_AND (288)
LOGICAL_OR (289)
EQ (290) 38
NE (291) 41
GT (292) 36
GE (293) 39
LT (294) 37
LE (295) 40
MOD (296)
TRUE_T (297) 34
FALSE_T (298) 35
GLOBAL_T (299)
SUB (300) 29 33
ADD (301) 28
MUL (302) 30
DIV (303) 31
LP (304) 15 32 47 48 49 50 53 54 55 56 59 60 61
RP (305) 15 32 47 48 49 50 53 54 55 56 59 60 61


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1 2 3 4, on right: 0 3 4
line (54)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 1 3 18 19
lines (55)
    on left: 18 19, on right: 19 65
assign_statement (56)
    on left: 20 21 22 23 24, on right: 7 61
math_statement (57)
    on left: 25 26 27 28 29 30 31 32 33, on right: 6 20 28 29 30 31
    32 33 36 37 38 39 40 41 49 51
bool_statement (58)
    on left: 34 35 36 37 38 39 40 41, on right: 8 22 50 52 53 54 55
    56 59 60 61
TypeForParam (59)
    on left: 42 43 44 45 46, on right: 47
function_definition (60)
    on left: 47 48, on right: 2 4
function_employ (61)
    on left: 49 50, on right: 21 27
return_statement (62)
    on left: 51 52, on right: 12
if_statement (63)
    on left: 53 54 55 56, on right: 10
elsif_list (64)
    on left: 57 58, on right: 55 56 58
elsif (65)
    on left: 59, on right: 57 58
while_statement (66)
    on left: 60, on right: 9
for_statement (67)
    on left: 61, on right: 11
switchLines (68)
    on left: 62 63 64, on right: 5 47 53 54 55 56 59 60 61 62
block (69)
    on left: 65 66, on right: 47 48 53 54 55 56 59 60 61
break_statement (70)
    on left: 67, on right: 13
continue_statement (71)
    on left: 68, on right: 14


State 0

    0 $accept: . program $end

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    FUNCTION     shift, and go to state 6
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    BREAK        shift, and go to state 11
    CONTINUE     shift, and go to state 12
    TRUE_T       shift, and go to state 13
    FALSE_T      shift, and go to state 14
    SUB          shift, and go to state 15
    LP           shift, and go to state 16
    '\n'         shift, and go to state 17

    $end         reduce using rule 64 (switchLines)
    error        [reduce using rule 64 (switchLines)]
    NUM          [reduce using rule 64 (switchLines)]
    IDENTIFIER   [reduce using rule 64 (switchLines)]
    "hello msg"  [reduce using rule 64 (switchLines)]
    PRINT_T      [reduce using rule 64 (switchLines)]
    FUNCTION     [reduce using rule 64 (switchLines)]
    IF           [reduce using rule 64 (switchLines)]
    WHILE        [reduce using rule 64 (switchLines)]
    FOR          [reduce using rule 64 (switchLines)]
    RETURN_T     [reduce using rule 64 (switchLines)]
    BREAK        [reduce using rule 64 (switchLines)]
    CONTINUE     [reduce using rule 64 (switchLines)]
    TRUE_T       [reduce using rule 64 (switchLines)]
    FALSE_T      [reduce using rule 64 (switchLines)]
    SUB          [reduce using rule 64 (switchLines)]
    LP           [reduce using rule 64 (switchLines)]
    '\n'         [reduce using rule 64 (switchLines)]

    program              go to state 18
    line                 go to state 19
    assign_statement     go to state 20
    math_statement       go to state 21
    bool_statement       go to state 22
    function_definition  go to state 23
    function_employ      go to state 24
    return_statement     go to state 25
    if_statement         go to state 26
    while_statement      go to state 27
    for_statement        go to state 28
    switchLines          go to state 29
    break_statement      go to state 30
    continue_statement   go to state 31


State 1

   17 line: error . '\n'

    '\n'  shift, and go to state 32


State 2

   25 math_statement: NUM .

    $default  reduce using rule 25 (math_statement)


State 3

   20 assign_statement: IDENTIFIER . ASSIGN math_statement
   21                 | IDENTIFIER . ASSIGN function_employ
   22                 | IDENTIFIER . ASSIGN bool_statement
   23                 | IDENTIFIER . INCREASE
   24                 | IDENTIFIER . DECREASE
   26 math_statement: IDENTIFIER .
   49 function_employ: IDENTIFIER . LP math_statement RP
   50                | IDENTIFIER . LP bool_statement RP

    INCREASE  shift, and go to state 33
    DECREASE  shift, and go to state 34
    ASSIGN    shift, and go to state 35
    LP        shift, and go to state 36

    $default  reduce using rule 26 (math_statement)


State 4

   16 line: "hello msg" . '\n'

    '\n'  shift, and go to state 37


State 5

   15 line: PRINT_T . LP IDENTIFIER RP SEMICOLON

    LP  shift, and go to state 38


State 6

   47 function_definition: FUNCTION . IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block
   48                    | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 39


State 7

   53 if_statement: IF . LP bool_statement RP switchLines block
   54             | IF . LP bool_statement RP switchLines block switchLines ELSE switchLines block
   55             | IF . LP bool_statement RP switchLines block switchLines elsif_list
   56             | IF . LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    LP  shift, and go to state 40


State 8

   60 while_statement: WHILE . LP bool_statement RP switchLines block

    LP  shift, and go to state 41


State 9

   61 for_statement: FOR . LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    LP  shift, and go to state 42


State 10

   51 return_statement: RETURN_T . math_statement
   52                 | RETURN_T . bool_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 44
    bool_statement   go to state 45
    function_employ  go to state 24


State 11

   67 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 46


State 12

   68 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 13

   34 bool_statement: TRUE_T .

    $default  reduce using rule 34 (bool_statement)


State 14

   35 bool_statement: FALSE_T .

    $default  reduce using rule 35 (bool_statement)


State 15

   33 math_statement: SUB . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 48
    function_employ  go to state 24


State 16

   32 math_statement: LP . math_statement RP

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 49
    function_employ  go to state 24


State 17

   63 switchLines: '\n' .

    $default  reduce using rule 63 (switchLines)


State 18

    0 $accept: program . $end
    3 program: program . line
    4        | program . function_definition

    $end         shift, and go to state 50
    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    FUNCTION     shift, and go to state 6
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    BREAK        shift, and go to state 11
    CONTINUE     shift, and go to state 12
    TRUE_T       shift, and go to state 13
    FALSE_T      shift, and go to state 14
    SUB          shift, and go to state 15
    LP           shift, and go to state 16
    '\n'         shift, and go to state 17

    $end         [reduce using rule 64 (switchLines)]
    error        [reduce using rule 64 (switchLines)]
    NUM          [reduce using rule 64 (switchLines)]
    IDENTIFIER   [reduce using rule 64 (switchLines)]
    "hello msg"  [reduce using rule 64 (switchLines)]
    PRINT_T      [reduce using rule 64 (switchLines)]
    FUNCTION     [reduce using rule 64 (switchLines)]
    IF           [reduce using rule 64 (switchLines)]
    WHILE        [reduce using rule 64 (switchLines)]
    FOR          [reduce using rule 64 (switchLines)]
    RETURN_T     [reduce using rule 64 (switchLines)]
    BREAK        [reduce using rule 64 (switchLines)]
    CONTINUE     [reduce using rule 64 (switchLines)]
    TRUE_T       [reduce using rule 64 (switchLines)]
    FALSE_T      [reduce using rule 64 (switchLines)]
    SUB          [reduce using rule 64 (switchLines)]
    LP           [reduce using rule 64 (switchLines)]
    '\n'         [reduce using rule 64 (switchLines)]

    line                 go to state 51
    assign_statement     go to state 20
    math_statement       go to state 21
    bool_statement       go to state 22
    function_definition  go to state 52
    function_employ      go to state 24
    return_statement     go to state 25
    if_statement         go to state 26
    while_statement      go to state 27
    for_statement        go to state 28
    switchLines          go to state 29
    break_statement      go to state 30
    continue_statement   go to state 31


State 19

    1 program: line .

    $default  reduce using rule 1 (program)


State 20

    7 line: assign_statement . SEMICOLON

    SEMICOLON  shift, and go to state 53


State 21

    6 line: math_statement . '\n'
   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement . GT math_statement
   37               | math_statement . LT math_statement
   38               | math_statement . EQ math_statement
   39               | math_statement . GE math_statement
   40               | math_statement . LE math_statement
   41               | math_statement . NE math_statement

    EQ    shift, and go to state 54
    NE    shift, and go to state 55
    GT    shift, and go to state 56
    GE    shift, and go to state 57
    LT    shift, and go to state 58
    LE    shift, and go to state 59
    SUB   shift, and go to state 60
    ADD   shift, and go to state 61
    MUL   shift, and go to state 62
    DIV   shift, and go to state 63
    '\n'  shift, and go to state 64


State 22

    8 line: bool_statement .

    $default  reduce using rule 8 (line)


State 23

    2 program: function_definition .

    $default  reduce using rule 2 (program)


State 24

   27 math_statement: function_employ .

    $default  reduce using rule 27 (math_statement)


State 25

   12 line: return_statement . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 26

   10 line: if_statement .

    $default  reduce using rule 10 (line)


State 27

    9 line: while_statement .

    $default  reduce using rule 9 (line)


State 28

   11 line: for_statement .

    $default  reduce using rule 11 (line)


State 29

    5 line: switchLines .
   62 switchLines: switchLines . '\n'

    '\n'  shift, and go to state 66

    '\n'      [reduce using rule 5 (line)]
    $default  reduce using rule 5 (line)


State 30

   13 line: break_statement .

    $default  reduce using rule 13 (line)


State 31

   14 line: continue_statement .

    $default  reduce using rule 14 (line)


State 32

   17 line: error '\n' .

    $default  reduce using rule 17 (line)


State 33

   23 assign_statement: IDENTIFIER INCREASE .

    $default  reduce using rule 23 (assign_statement)


State 34

   24 assign_statement: IDENTIFIER DECREASE .

    $default  reduce using rule 24 (assign_statement)


State 35

   20 assign_statement: IDENTIFIER ASSIGN . math_statement
   21                 | IDENTIFIER ASSIGN . function_employ
   22                 | IDENTIFIER ASSIGN . bool_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 67
    bool_statement   go to state 68
    function_employ  go to state 69


State 36

   49 function_employ: IDENTIFIER LP . math_statement RP
   50                | IDENTIFIER LP . bool_statement RP

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 70
    bool_statement   go to state 71
    function_employ  go to state 24


State 37

   16 line: "hello msg" '\n' .

    $default  reduce using rule 16 (line)


State 38

   15 line: PRINT_T LP . IDENTIFIER RP SEMICOLON

    IDENTIFIER  shift, and go to state 72


State 39

   47 function_definition: FUNCTION IDENTIFIER . LP TypeForParam IDENTIFIER RP switchLines block
   48                    | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 73


State 40

   53 if_statement: IF LP . bool_statement RP switchLines block
   54             | IF LP . bool_statement RP switchLines block switchLines ELSE switchLines block
   55             | IF LP . bool_statement RP switchLines block switchLines elsif_list
   56             | IF LP . bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 74
    bool_statement   go to state 75
    function_employ  go to state 24


State 41

   60 while_statement: WHILE LP . bool_statement RP switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 74
    bool_statement   go to state 76
    function_employ  go to state 24


State 42

   61 for_statement: FOR LP . assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    IDENTIFIER  shift, and go to state 77

    assign_statement  go to state 78


State 43

   26 math_statement: IDENTIFIER .
   49 function_employ: IDENTIFIER . LP math_statement RP
   50                | IDENTIFIER . LP bool_statement RP

    LP  shift, and go to state 36

    LP        [reduce using rule 26 (math_statement)]
    $default  reduce using rule 26 (math_statement)


State 44

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement . GT math_statement
   37               | math_statement . LT math_statement
   38               | math_statement . EQ math_statement
   39               | math_statement . GE math_statement
   40               | math_statement . LE math_statement
   41               | math_statement . NE math_statement
   51 return_statement: RETURN_T math_statement .

    EQ   shift, and go to state 54
    NE   shift, and go to state 55
    GT   shift, and go to state 56
    GE   shift, and go to state 57
    LT   shift, and go to state 58
    LE   shift, and go to state 59
    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    $default  reduce using rule 51 (return_statement)


State 45

   52 return_statement: RETURN_T bool_statement .

    $default  reduce using rule 52 (return_statement)


State 46

   67 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 67 (break_statement)


State 47

   68 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 68 (continue_statement)


State 48

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   33               | SUB math_statement .

    $default  reduce using rule 33 (math_statement)


State 49

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   32               | LP math_statement . RP

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63
    RP   shift, and go to state 79


State 50

    0 $accept: program $end .

    $default  accept


State 51

    3 program: program line .

    $default  reduce using rule 3 (program)


State 52

    4 program: program function_definition .

    $default  reduce using rule 4 (program)


State 53

    7 line: assign_statement SEMICOLON .

    $default  reduce using rule 7 (line)


State 54

   38 bool_statement: math_statement EQ . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 80
    function_employ  go to state 24


State 55

   41 bool_statement: math_statement NE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 81
    function_employ  go to state 24


State 56

   36 bool_statement: math_statement GT . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 82
    function_employ  go to state 24


State 57

   39 bool_statement: math_statement GE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 83
    function_employ  go to state 24


State 58

   37 bool_statement: math_statement LT . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 84
    function_employ  go to state 24


State 59

   40 bool_statement: math_statement LE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 85
    function_employ  go to state 24


State 60

   29 math_statement: math_statement SUB . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 86
    function_employ  go to state 24


State 61

   28 math_statement: math_statement ADD . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 87
    function_employ  go to state 24


State 62

   30 math_statement: math_statement MUL . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 88
    function_employ  go to state 24


State 63

   31 math_statement: math_statement DIV . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 89
    function_employ  go to state 24


State 64

    6 line: math_statement '\n' .

    $default  reduce using rule 6 (line)


State 65

   12 line: return_statement SEMICOLON .

    $default  reduce using rule 12 (line)


State 66

   62 switchLines: switchLines '\n' .

    $default  reduce using rule 62 (switchLines)


State 67

   20 assign_statement: IDENTIFIER ASSIGN math_statement .
   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement . GT math_statement
   37               | math_statement . LT math_statement
   38               | math_statement . EQ math_statement
   39               | math_statement . GE math_statement
   40               | math_statement . LE math_statement
   41               | math_statement . NE math_statement

    EQ   shift, and go to state 54
    NE   shift, and go to state 55
    GT   shift, and go to state 56
    GE   shift, and go to state 57
    LT   shift, and go to state 58
    LE   shift, and go to state 59
    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    $default  reduce using rule 20 (assign_statement)


State 68

   22 assign_statement: IDENTIFIER ASSIGN bool_statement .

    $default  reduce using rule 22 (assign_statement)


State 69

   21 assign_statement: IDENTIFIER ASSIGN function_employ .
   27 math_statement: function_employ .

    SEMICOLON  reduce using rule 21 (assign_statement)
    SEMICOLON  [reduce using rule 27 (math_statement)]
    RP         reduce using rule 21 (assign_statement)
    RP         [reduce using rule 27 (math_statement)]
    $default   reduce using rule 27 (math_statement)


State 70

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement . GT math_statement
   37               | math_statement . LT math_statement
   38               | math_statement . EQ math_statement
   39               | math_statement . GE math_statement
   40               | math_statement . LE math_statement
   41               | math_statement . NE math_statement
   49 function_employ: IDENTIFIER LP math_statement . RP

    EQ   shift, and go to state 54
    NE   shift, and go to state 55
    GT   shift, and go to state 56
    GE   shift, and go to state 57
    LT   shift, and go to state 58
    LE   shift, and go to state 59
    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63
    RP   shift, and go to state 90


State 71

   50 function_employ: IDENTIFIER LP bool_statement . RP

    RP  shift, and go to state 91


State 72

   15 line: PRINT_T LP IDENTIFIER . RP SEMICOLON

    RP  shift, and go to state 92


State 73

   47 function_definition: FUNCTION IDENTIFIER LP . TypeForParam IDENTIFIER RP switchLines block
   48                    | FUNCTION IDENTIFIER LP . RP block

    INT_TYPE     shift, and go to state 93
    FLOAT_TYPE   shift, and go to state 94
    DOUBLE_TYPE  shift, and go to state 95
    BOOL_TYPE    shift, and go to state 96
    STRING_TYPE  shift, and go to state 97
    RP           shift, and go to state 98

    TypeForParam  go to state 99


State 74

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement . GT math_statement
   37               | math_statement . LT math_statement
   38               | math_statement . EQ math_statement
   39               | math_statement . GE math_statement
   40               | math_statement . LE math_statement
   41               | math_statement . NE math_statement

    EQ   shift, and go to state 54
    NE   shift, and go to state 55
    GT   shift, and go to state 56
    GE   shift, and go to state 57
    LT   shift, and go to state 58
    LE   shift, and go to state 59
    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63


State 75

   53 if_statement: IF LP bool_statement . RP switchLines block
   54             | IF LP bool_statement . RP switchLines block switchLines ELSE switchLines block
   55             | IF LP bool_statement . RP switchLines block switchLines elsif_list
   56             | IF LP bool_statement . RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    RP  shift, and go to state 100


State 76

   60 while_statement: WHILE LP bool_statement . RP switchLines block

    RP  shift, and go to state 101


State 77

   20 assign_statement: IDENTIFIER . ASSIGN math_statement
   21                 | IDENTIFIER . ASSIGN function_employ
   22                 | IDENTIFIER . ASSIGN bool_statement
   23                 | IDENTIFIER . INCREASE
   24                 | IDENTIFIER . DECREASE

    INCREASE  shift, and go to state 33
    DECREASE  shift, and go to state 34
    ASSIGN    shift, and go to state 35


State 78

   61 for_statement: FOR LP assign_statement . SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    SEMICOLON  shift, and go to state 102


State 79

   32 math_statement: LP math_statement RP .

    $default  reduce using rule 32 (math_statement)


State 80

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   38 bool_statement: math_statement EQ math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 38 (bool_statement)]
    $default  reduce using rule 38 (bool_statement)


State 81

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   41 bool_statement: math_statement NE math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 41 (bool_statement)]
    $default  reduce using rule 41 (bool_statement)


State 82

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   36 bool_statement: math_statement GT math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 36 (bool_statement)]
    $default  reduce using rule 36 (bool_statement)


State 83

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   39 bool_statement: math_statement GE math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 39 (bool_statement)]
    $default  reduce using rule 39 (bool_statement)


State 84

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   37 bool_statement: math_statement LT math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 37 (bool_statement)]
    $default  reduce using rule 37 (bool_statement)


State 85

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   40 bool_statement: math_statement LE math_statement .

    SUB  shift, and go to state 60
    ADD  shift, and go to state 61
    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    SUB       [reduce using rule 40 (bool_statement)]
    $default  reduce using rule 40 (bool_statement)


State 86

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   29               | math_statement SUB math_statement .
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement

    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    $default  reduce using rule 29 (math_statement)


State 87

   28 math_statement: math_statement . ADD math_statement
   28               | math_statement ADD math_statement .
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement

    MUL  shift, and go to state 62
    DIV  shift, and go to state 63

    $default  reduce using rule 28 (math_statement)


State 88

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   30               | math_statement MUL math_statement .
   31               | math_statement . DIV math_statement

    $default  reduce using rule 30 (math_statement)


State 89

   28 math_statement: math_statement . ADD math_statement
   29               | math_statement . SUB math_statement
   30               | math_statement . MUL math_statement
   31               | math_statement . DIV math_statement
   31               | math_statement DIV math_statement .

    $default  reduce using rule 31 (math_statement)


State 90

   49 function_employ: IDENTIFIER LP math_statement RP .

    $default  reduce using rule 49 (function_employ)


State 91

   50 function_employ: IDENTIFIER LP bool_statement RP .

    $default  reduce using rule 50 (function_employ)


State 92

   15 line: PRINT_T LP IDENTIFIER RP . SEMICOLON

    SEMICOLON  shift, and go to state 103


State 93

   42 TypeForParam: INT_TYPE .

    $default  reduce using rule 42 (TypeForParam)


State 94

   43 TypeForParam: FLOAT_TYPE .

    $default  reduce using rule 43 (TypeForParam)


State 95

   44 TypeForParam: DOUBLE_TYPE .

    $default  reduce using rule 44 (TypeForParam)


State 96

   45 TypeForParam: BOOL_TYPE .

    $default  reduce using rule 45 (TypeForParam)


State 97

   46 TypeForParam: STRING_TYPE .

    $default  reduce using rule 46 (TypeForParam)


State 98

   48 function_definition: FUNCTION IDENTIFIER LP RP . block

    LC  shift, and go to state 104

    block  go to state 105


State 99

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam . IDENTIFIER RP switchLines block

    IDENTIFIER  shift, and go to state 106


State 100

   53 if_statement: IF LP bool_statement RP . switchLines block
   54             | IF LP bool_statement RP . switchLines block switchLines ELSE switchLines block
   55             | IF LP bool_statement RP . switchLines block switchLines elsif_list
   56             | IF LP bool_statement RP . switchLines block switchLines elsif_list switchLines ELSE switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 107


State 101

   60 while_statement: WHILE LP bool_statement RP . switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 108


State 102

   61 for_statement: FOR LP assign_statement SEMICOLON . bool_statement SEMICOLON assign_statement RP switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 74
    bool_statement   go to state 109
    function_employ  go to state 24


State 103

   15 line: PRINT_T LP IDENTIFIER RP SEMICOLON .

    $default  reduce using rule 15 (line)


State 104

   65 block: LC . lines RC
   66      | LC . RC

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    BREAK        shift, and go to state 11
    CONTINUE     shift, and go to state 12
    RC           shift, and go to state 110
    TRUE_T       shift, and go to state 13
    FALSE_T      shift, and go to state 14
    SUB          shift, and go to state 15
    LP           shift, and go to state 16
    '\n'         shift, and go to state 17

    error        [reduce using rule 64 (switchLines)]
    NUM          [reduce using rule 64 (switchLines)]
    IDENTIFIER   [reduce using rule 64 (switchLines)]
    "hello msg"  [reduce using rule 64 (switchLines)]
    PRINT_T      [reduce using rule 64 (switchLines)]
    IF           [reduce using rule 64 (switchLines)]
    WHILE        [reduce using rule 64 (switchLines)]
    FOR          [reduce using rule 64 (switchLines)]
    RETURN_T     [reduce using rule 64 (switchLines)]
    BREAK        [reduce using rule 64 (switchLines)]
    CONTINUE     [reduce using rule 64 (switchLines)]
    RC           [reduce using rule 64 (switchLines)]
    TRUE_T       [reduce using rule 64 (switchLines)]
    FALSE_T      [reduce using rule 64 (switchLines)]
    SUB          [reduce using rule 64 (switchLines)]
    LP           [reduce using rule 64 (switchLines)]
    '\n'         [reduce using rule 64 (switchLines)]

    line                go to state 111
    lines               go to state 112
    assign_statement    go to state 20
    math_statement      go to state 21
    bool_statement      go to state 22
    function_employ     go to state 24
    return_statement    go to state 25
    if_statement        go to state 26
    while_statement     go to state 27
    for_statement       go to state 28
    switchLines         go to state 29
    break_statement     go to state 30
    continue_statement  go to state 31


State 105

   48 function_definition: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 48 (function_definition)


State 106

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER . RP switchLines block

    RP  shift, and go to state 113


State 107

   53 if_statement: IF LP bool_statement RP switchLines . block
   54             | IF LP bool_statement RP switchLines . block switchLines ELSE switchLines block
   55             | IF LP bool_statement RP switchLines . block switchLines elsif_list
   56             | IF LP bool_statement RP switchLines . block switchLines elsif_list switchLines ELSE switchLines block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 114


State 108

   60 while_statement: WHILE LP bool_statement RP switchLines . block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 115


State 109

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement . SEMICOLON assign_statement RP switchLines block

    SEMICOLON  shift, and go to state 116


State 110

   66 block: LC RC .

    $default  reduce using rule 66 (block)


State 111

   18 lines: line .

    $default  reduce using rule 18 (lines)


State 112

   19 lines: lines . line
   65 block: LC lines . RC

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    BREAK        shift, and go to state 11
    CONTINUE     shift, and go to state 12
    RC           shift, and go to state 117
    TRUE_T       shift, and go to state 13
    FALSE_T      shift, and go to state 14
    SUB          shift, and go to state 15
    LP           shift, and go to state 16
    '\n'         shift, and go to state 17

    error        [reduce using rule 64 (switchLines)]
    NUM          [reduce using rule 64 (switchLines)]
    IDENTIFIER   [reduce using rule 64 (switchLines)]
    "hello msg"  [reduce using rule 64 (switchLines)]
    PRINT_T      [reduce using rule 64 (switchLines)]
    IF           [reduce using rule 64 (switchLines)]
    WHILE        [reduce using rule 64 (switchLines)]
    FOR          [reduce using rule 64 (switchLines)]
    RETURN_T     [reduce using rule 64 (switchLines)]
    BREAK        [reduce using rule 64 (switchLines)]
    CONTINUE     [reduce using rule 64 (switchLines)]
    RC           [reduce using rule 64 (switchLines)]
    TRUE_T       [reduce using rule 64 (switchLines)]
    FALSE_T      [reduce using rule 64 (switchLines)]
    SUB          [reduce using rule 64 (switchLines)]
    LP           [reduce using rule 64 (switchLines)]
    '\n'         [reduce using rule 64 (switchLines)]

    line                go to state 118
    assign_statement    go to state 20
    math_statement      go to state 21
    bool_statement      go to state 22
    function_employ     go to state 24
    return_statement    go to state 25
    if_statement        go to state 26
    while_statement     go to state 27
    for_statement       go to state 28
    switchLines         go to state 29
    break_statement     go to state 30
    continue_statement  go to state 31


State 113

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP . switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 119


State 114

   53 if_statement: IF LP bool_statement RP switchLines block .
   54             | IF LP bool_statement RP switchLines block . switchLines ELSE switchLines block
   55             | IF LP bool_statement RP switchLines block . switchLines elsif_list
   56             | IF LP bool_statement RP switchLines block . switchLines elsif_list switchLines ELSE switchLines block

    '\n'  shift, and go to state 17

    ELSE      reduce using rule 64 (switchLines)
    ELSIF     reduce using rule 64 (switchLines)
    '\n'      [reduce using rule 53 (if_statement)]
    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 53 (if_statement)

    switchLines  go to state 120


State 115

   60 while_statement: WHILE LP bool_statement RP switchLines block .

    $default  reduce using rule 60 (while_statement)


State 116

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON . assign_statement RP switchLines block

    IDENTIFIER  shift, and go to state 77

    assign_statement  go to state 121


State 117

   65 block: LC lines RC .

    $default  reduce using rule 65 (block)


State 118

   19 lines: lines line .

    $default  reduce using rule 19 (lines)


State 119

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines . block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 122


State 120

   54 if_statement: IF LP bool_statement RP switchLines block switchLines . ELSE switchLines block
   55             | IF LP bool_statement RP switchLines block switchLines . elsif_list
   56             | IF LP bool_statement RP switchLines block switchLines . elsif_list switchLines ELSE switchLines block
   62 switchLines: switchLines . '\n'

    ELSE   shift, and go to state 123
    ELSIF  shift, and go to state 124
    '\n'   shift, and go to state 66

    elsif_list  go to state 125
    elsif       go to state 126


State 121

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement . RP switchLines block

    RP  shift, and go to state 127


State 122

   47 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block .

    $default  reduce using rule 47 (function_definition)


State 123

   54 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE . switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 128


State 124

   59 elsif: ELSIF . LP bool_statement RP switchLines block switchLines

    LP  shift, and go to state 129


State 125

   55 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list .
   56             | IF LP bool_statement RP switchLines block switchLines elsif_list . switchLines ELSE switchLines block
   58 elsif_list: elsif_list . elsif

    ELSIF  shift, and go to state 124
    '\n'   shift, and go to state 17

    ELSE      reduce using rule 64 (switchLines)
    '\n'      [reduce using rule 55 (if_statement)]
    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 55 (if_statement)

    elsif        go to state 130
    switchLines  go to state 131


State 126

   57 elsif_list: elsif .

    $default  reduce using rule 57 (elsif_list)


State 127

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP . switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 132


State 128

   54 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE switchLines . block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 133


State 129

   59 elsif: ELSIF LP . bool_statement RP switchLines block switchLines

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 43
    TRUE_T      shift, and go to state 13
    FALSE_T     shift, and go to state 14
    SUB         shift, and go to state 15
    LP          shift, and go to state 16

    math_statement   go to state 74
    bool_statement   go to state 134
    function_employ  go to state 24


State 130

   58 elsif_list: elsif_list elsif .

    $default  reduce using rule 58 (elsif_list)


State 131

   56 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines . ELSE switchLines block
   62 switchLines: switchLines . '\n'

    ELSE  shift, and go to state 135
    '\n'  shift, and go to state 66


State 132

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines . block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 136


State 133

   54 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE switchLines block .

    $default  reduce using rule 54 (if_statement)


State 134

   59 elsif: ELSIF LP bool_statement . RP switchLines block switchLines

    RP  shift, and go to state 137


State 135

   56 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE . switchLines block

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 138


State 136

   61 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block .

    $default  reduce using rule 61 (for_statement)


State 137

   59 elsif: ELSIF LP bool_statement RP . switchLines block switchLines

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 139


State 138

   56 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines . block
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 140


State 139

   59 elsif: ELSIF LP bool_statement RP switchLines . block switchLines
   62 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 66

    block  go to state 141


State 140

   56 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block .

    $default  reduce using rule 56 (if_statement)


State 141

   59 elsif: ELSIF LP bool_statement RP switchLines block . switchLines

    '\n'  shift, and go to state 17

    '\n'      [reduce using rule 64 (switchLines)]
    $default  reduce using rule 64 (switchLines)

    switchLines  go to state 142


State 142

   59 elsif: ELSIF LP bool_statement RP switchLines block switchLines .
   62 switchLines: switchLines . '\n'

    '\n'  shift, and go to state 66

    '\n'      [reduce using rule 59 (elsif)]
    $default  reduce using rule 59 (elsif)
