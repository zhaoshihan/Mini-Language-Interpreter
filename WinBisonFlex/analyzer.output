Terminals unused in grammar

   DQ_MARK
   EXC_MARK
   STR_VAL
   COMMENT
   BREAK
   CONTINUE
   NULL_T
   COMMA
   LOGICAL_AND
   LOGICAL_OR
   MOD
   GLOBAL_T


Rules useless in parser due to conflicts

   51 if_statement: IF LP bool_statement RP switchLines block
   53             | IF LP bool_statement RP switchLines block switchLines elsif_list


State 0 conflicts: 15 shift/reduce
State 16 conflicts: 16 shift/reduce
State 27 conflicts: 1 shift/reduce
State 67 conflicts: 2 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 104 conflicts: 15 shift/reduce
State 113 conflicts: 15 shift/reduce
State 114 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce, 1 reduce/reduce
State 124 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce, 1 reduce/reduce
State 128 conflicts: 1 shift/reduce
State 136 conflicts: 1 shift/reduce
State 138 conflicts: 1 shift/reduce
State 142 conflicts: 1 shift/reduce
State 143 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: line
    2        | function_definition
    3        | program line
    4        | program function_definition

    5 line: switchLines
    6     | math_statement '\n'
    7     | assign_statement SEMICOLON '\n'
    8     | bool_statement '\n'
    9     | while_statement '\n'
   10     | if_statement '\n'
   11     | for_statement '\n'
   12     | return_statement SEMICOLON '\n'
   13     | PRINT_T LP IDENTIFIER RP SEMICOLON '\n'
   14     | "hello msg" '\n'
   15     | error '\n'

   16 lines: line
   17      | lines line

   18 assign_statement: IDENTIFIER ASSIGN math_statement
   19                 | IDENTIFIER ASSIGN function_employ
   20                 | IDENTIFIER ASSIGN bool_statement
   21                 | IDENTIFIER INCREASE
   22                 | IDENTIFIER DECREASE

   23 math_statement: NUM
   24               | IDENTIFIER
   25               | function_employ
   26               | math_statement ADD math_statement
   27               | math_statement SUB math_statement
   28               | math_statement MUL math_statement
   29               | math_statement DIV math_statement
   30               | LP math_statement RP
   31               | SUB math_statement

   32 bool_statement: TRUE_T
   33               | FALSE_T
   34               | math_statement GT math_statement
   35               | math_statement LT math_statement
   36               | math_statement EQ math_statement
   37               | math_statement GE math_statement
   38               | math_statement LE math_statement
   39               | math_statement NE math_statement

   40 TypeForParam: INT_TYPE
   41             | FLOAT_TYPE
   42             | DOUBLE_TYPE
   43             | BOOL_TYPE
   44             | STRING_TYPE

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block
   46                    | FUNCTION IDENTIFIER LP RP block

   47 function_employ: IDENTIFIER LP math_statement RP
   48                | IDENTIFIER LP bool_statement RP

   49 return_statement: RETURN_T math_statement
   50                 | RETURN_T bool_statement

   51 if_statement: IF LP bool_statement RP switchLines block
   52             | IF LP bool_statement RP switchLines block switchLines ELSE switchLines block
   53             | IF LP bool_statement RP switchLines block switchLines elsif_list
   54             | IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

   55 elsif_list: elsif
   56           | elsif_list elsif

   57 elsif: ELSIF LP bool_statement RP switchLines block switchLines

   58 while_statement: WHILE LP bool_statement RP switchLines block

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

   60 switchLines: switchLines '\n'
   61            | '\n'
   62            | %empty

   63 block: LC lines RC
   64      | LC RC


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 6 7 8 9 10 11 12 13 14 15 60 61
error (256) 15
NUM (258) 23
IDENTIFIER (259) 13 18 19 20 21 22 24 45 46 47 48
"hello msg" (260) 14
INT_TYPE (261) 40
FLOAT_TYPE (262) 41
DOUBLE_TYPE (263) 42
BOOL_TYPE (264) 43
STRING_TYPE (265) 44
DQ_MARK (266)
EXC_MARK (267)
INCREASE (268) 21
DECREASE (269) 22
STR_VAL (270)
PRINT_T (271) 13
COMMENT (272)
FUNCTION (273) 45 46
IF (274) 51 52 53 54
ELSE (275) 52 54
ELSIF (276) 57
WHILE (277) 58
FOR (278) 59
RETURN_T (279) 49 50
BREAK (280)
CONTINUE (281)
NULL_T (282)
LC (283) 63 64
RC (284) 63 64
SEMICOLON (285) 7 12 13 59
COMMA (286)
ASSIGN (287) 18 19 20
LOGICAL_AND (288)
LOGICAL_OR (289)
EQ (290) 36
NE (291) 39
GT (292) 34
GE (293) 37
LT (294) 35
LE (295) 38
MOD (296)
TRUE_T (297) 32
FALSE_T (298) 33
GLOBAL_T (299)
SUB (300) 27 31
ADD (301) 26
MUL (302) 28
DIV (303) 29
LP (304) 13 30 45 46 47 48 51 52 53 54 57 58 59
RP (305) 13 30 45 46 47 48 51 52 53 54 57 58 59


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1 2 3 4, on right: 0 3 4
line (54)
    on left: 5 6 7 8 9 10 11 12 13 14 15, on right: 1 3 16 17
lines (55)
    on left: 16 17, on right: 17 63
assign_statement (56)
    on left: 18 19 20 21 22, on right: 7 59
math_statement (57)
    on left: 23 24 25 26 27 28 29 30 31, on right: 6 18 26 27 28 29
    30 31 34 35 36 37 38 39 47 49
bool_statement (58)
    on left: 32 33 34 35 36 37 38 39, on right: 8 20 48 50 51 52 53
    54 57 58 59
TypeForParam (59)
    on left: 40 41 42 43 44, on right: 45
function_definition (60)
    on left: 45 46, on right: 2 4
function_employ (61)
    on left: 47 48, on right: 19 25
return_statement (62)
    on left: 49 50, on right: 12
if_statement (63)
    on left: 51 52 53 54, on right: 10
elsif_list (64)
    on left: 55 56, on right: 53 54 56
elsif (65)
    on left: 57, on right: 55 56
while_statement (66)
    on left: 58, on right: 9
for_statement (67)
    on left: 59, on right: 11
switchLines (68)
    on left: 60 61 62, on right: 5 45 51 52 53 54 57 58 59 60
block (69)
    on left: 63 64, on right: 45 46 51 52 53 54 57 58 59


State 0

    0 $accept: . program $end

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    FUNCTION     shift, and go to state 6
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    TRUE_T       shift, and go to state 11
    FALSE_T      shift, and go to state 12
    SUB          shift, and go to state 13
    LP           shift, and go to state 14
    '\n'         shift, and go to state 15

    $end         reduce using rule 62 (switchLines)
    error        [reduce using rule 62 (switchLines)]
    NUM          [reduce using rule 62 (switchLines)]
    IDENTIFIER   [reduce using rule 62 (switchLines)]
    "hello msg"  [reduce using rule 62 (switchLines)]
    PRINT_T      [reduce using rule 62 (switchLines)]
    FUNCTION     [reduce using rule 62 (switchLines)]
    IF           [reduce using rule 62 (switchLines)]
    WHILE        [reduce using rule 62 (switchLines)]
    FOR          [reduce using rule 62 (switchLines)]
    RETURN_T     [reduce using rule 62 (switchLines)]
    TRUE_T       [reduce using rule 62 (switchLines)]
    FALSE_T      [reduce using rule 62 (switchLines)]
    SUB          [reduce using rule 62 (switchLines)]
    LP           [reduce using rule 62 (switchLines)]
    '\n'         [reduce using rule 62 (switchLines)]

    program              go to state 16
    line                 go to state 17
    assign_statement     go to state 18
    math_statement       go to state 19
    bool_statement       go to state 20
    function_definition  go to state 21
    function_employ      go to state 22
    return_statement     go to state 23
    if_statement         go to state 24
    while_statement      go to state 25
    for_statement        go to state 26
    switchLines          go to state 27


State 1

   15 line: error . '\n'

    '\n'  shift, and go to state 28


State 2

   23 math_statement: NUM .

    $default  reduce using rule 23 (math_statement)


State 3

   18 assign_statement: IDENTIFIER . ASSIGN math_statement
   19                 | IDENTIFIER . ASSIGN function_employ
   20                 | IDENTIFIER . ASSIGN bool_statement
   21                 | IDENTIFIER . INCREASE
   22                 | IDENTIFIER . DECREASE
   24 math_statement: IDENTIFIER .
   47 function_employ: IDENTIFIER . LP math_statement RP
   48                | IDENTIFIER . LP bool_statement RP

    INCREASE  shift, and go to state 29
    DECREASE  shift, and go to state 30
    ASSIGN    shift, and go to state 31
    LP        shift, and go to state 32

    $default  reduce using rule 24 (math_statement)


State 4

   14 line: "hello msg" . '\n'

    '\n'  shift, and go to state 33


State 5

   13 line: PRINT_T . LP IDENTIFIER RP SEMICOLON '\n'

    LP  shift, and go to state 34


State 6

   45 function_definition: FUNCTION . IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block
   46                    | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 35


State 7

   51 if_statement: IF . LP bool_statement RP switchLines block
   52             | IF . LP bool_statement RP switchLines block switchLines ELSE switchLines block
   53             | IF . LP bool_statement RP switchLines block switchLines elsif_list
   54             | IF . LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    LP  shift, and go to state 36


State 8

   58 while_statement: WHILE . LP bool_statement RP switchLines block

    LP  shift, and go to state 37


State 9

   59 for_statement: FOR . LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    LP  shift, and go to state 38


State 10

   49 return_statement: RETURN_T . math_statement
   50                 | RETURN_T . bool_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 40
    bool_statement   go to state 41
    function_employ  go to state 22


State 11

   32 bool_statement: TRUE_T .

    $default  reduce using rule 32 (bool_statement)


State 12

   33 bool_statement: FALSE_T .

    $default  reduce using rule 33 (bool_statement)


State 13

   31 math_statement: SUB . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 42
    function_employ  go to state 22


State 14

   30 math_statement: LP . math_statement RP

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 43
    function_employ  go to state 22


State 15

   61 switchLines: '\n' .

    $default  reduce using rule 61 (switchLines)


State 16

    0 $accept: program . $end
    3 program: program . line
    4        | program . function_definition

    $end         shift, and go to state 44
    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    FUNCTION     shift, and go to state 6
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    TRUE_T       shift, and go to state 11
    FALSE_T      shift, and go to state 12
    SUB          shift, and go to state 13
    LP           shift, and go to state 14
    '\n'         shift, and go to state 15

    $end         [reduce using rule 62 (switchLines)]
    error        [reduce using rule 62 (switchLines)]
    NUM          [reduce using rule 62 (switchLines)]
    IDENTIFIER   [reduce using rule 62 (switchLines)]
    "hello msg"  [reduce using rule 62 (switchLines)]
    PRINT_T      [reduce using rule 62 (switchLines)]
    FUNCTION     [reduce using rule 62 (switchLines)]
    IF           [reduce using rule 62 (switchLines)]
    WHILE        [reduce using rule 62 (switchLines)]
    FOR          [reduce using rule 62 (switchLines)]
    RETURN_T     [reduce using rule 62 (switchLines)]
    TRUE_T       [reduce using rule 62 (switchLines)]
    FALSE_T      [reduce using rule 62 (switchLines)]
    SUB          [reduce using rule 62 (switchLines)]
    LP           [reduce using rule 62 (switchLines)]
    '\n'         [reduce using rule 62 (switchLines)]

    line                 go to state 45
    assign_statement     go to state 18
    math_statement       go to state 19
    bool_statement       go to state 20
    function_definition  go to state 46
    function_employ      go to state 22
    return_statement     go to state 23
    if_statement         go to state 24
    while_statement      go to state 25
    for_statement        go to state 26
    switchLines          go to state 27


State 17

    1 program: line .

    $default  reduce using rule 1 (program)


State 18

    7 line: assign_statement . SEMICOLON '\n'

    SEMICOLON  shift, and go to state 47


State 19

    6 line: math_statement . '\n'
   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement . GT math_statement
   35               | math_statement . LT math_statement
   36               | math_statement . EQ math_statement
   37               | math_statement . GE math_statement
   38               | math_statement . LE math_statement
   39               | math_statement . NE math_statement

    EQ    shift, and go to state 48
    NE    shift, and go to state 49
    GT    shift, and go to state 50
    GE    shift, and go to state 51
    LT    shift, and go to state 52
    LE    shift, and go to state 53
    SUB   shift, and go to state 54
    ADD   shift, and go to state 55
    MUL   shift, and go to state 56
    DIV   shift, and go to state 57
    '\n'  shift, and go to state 58


State 20

    8 line: bool_statement . '\n'

    '\n'  shift, and go to state 59


State 21

    2 program: function_definition .

    $default  reduce using rule 2 (program)


State 22

   25 math_statement: function_employ .

    $default  reduce using rule 25 (math_statement)


State 23

   12 line: return_statement . SEMICOLON '\n'

    SEMICOLON  shift, and go to state 60


State 24

   10 line: if_statement . '\n'

    '\n'  shift, and go to state 61


State 25

    9 line: while_statement . '\n'

    '\n'  shift, and go to state 62


State 26

   11 line: for_statement . '\n'

    '\n'  shift, and go to state 63


State 27

    5 line: switchLines .
   60 switchLines: switchLines . '\n'

    '\n'  shift, and go to state 64

    '\n'      [reduce using rule 5 (line)]
    $default  reduce using rule 5 (line)


State 28

   15 line: error '\n' .

    $default  reduce using rule 15 (line)


State 29

   21 assign_statement: IDENTIFIER INCREASE .

    $default  reduce using rule 21 (assign_statement)


State 30

   22 assign_statement: IDENTIFIER DECREASE .

    $default  reduce using rule 22 (assign_statement)


State 31

   18 assign_statement: IDENTIFIER ASSIGN . math_statement
   19                 | IDENTIFIER ASSIGN . function_employ
   20                 | IDENTIFIER ASSIGN . bool_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 65
    bool_statement   go to state 66
    function_employ  go to state 67


State 32

   47 function_employ: IDENTIFIER LP . math_statement RP
   48                | IDENTIFIER LP . bool_statement RP

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 68
    bool_statement   go to state 69
    function_employ  go to state 22


State 33

   14 line: "hello msg" '\n' .

    $default  reduce using rule 14 (line)


State 34

   13 line: PRINT_T LP . IDENTIFIER RP SEMICOLON '\n'

    IDENTIFIER  shift, and go to state 70


State 35

   45 function_definition: FUNCTION IDENTIFIER . LP TypeForParam IDENTIFIER RP switchLines block
   46                    | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 71


State 36

   51 if_statement: IF LP . bool_statement RP switchLines block
   52             | IF LP . bool_statement RP switchLines block switchLines ELSE switchLines block
   53             | IF LP . bool_statement RP switchLines block switchLines elsif_list
   54             | IF LP . bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 72
    bool_statement   go to state 73
    function_employ  go to state 22


State 37

   58 while_statement: WHILE LP . bool_statement RP switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 72
    bool_statement   go to state 74
    function_employ  go to state 22


State 38

   59 for_statement: FOR LP . assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    IDENTIFIER  shift, and go to state 75

    assign_statement  go to state 76


State 39

   24 math_statement: IDENTIFIER .
   47 function_employ: IDENTIFIER . LP math_statement RP
   48                | IDENTIFIER . LP bool_statement RP

    LP  shift, and go to state 32

    $default  reduce using rule 24 (math_statement)


State 40

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement . GT math_statement
   35               | math_statement . LT math_statement
   36               | math_statement . EQ math_statement
   37               | math_statement . GE math_statement
   38               | math_statement . LE math_statement
   39               | math_statement . NE math_statement
   49 return_statement: RETURN_T math_statement .

    EQ   shift, and go to state 48
    NE   shift, and go to state 49
    GT   shift, and go to state 50
    GE   shift, and go to state 51
    LT   shift, and go to state 52
    LE   shift, and go to state 53
    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 49 (return_statement)


State 41

   50 return_statement: RETURN_T bool_statement .

    $default  reduce using rule 50 (return_statement)


State 42

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   31               | SUB math_statement .

    $default  reduce using rule 31 (math_statement)


State 43

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   30               | LP math_statement . RP

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57
    RP   shift, and go to state 77


State 44

    0 $accept: program $end .

    $default  accept


State 45

    3 program: program line .

    $default  reduce using rule 3 (program)


State 46

    4 program: program function_definition .

    $default  reduce using rule 4 (program)


State 47

    7 line: assign_statement SEMICOLON . '\n'

    '\n'  shift, and go to state 78


State 48

   36 bool_statement: math_statement EQ . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 79
    function_employ  go to state 22


State 49

   39 bool_statement: math_statement NE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 80
    function_employ  go to state 22


State 50

   34 bool_statement: math_statement GT . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 81
    function_employ  go to state 22


State 51

   37 bool_statement: math_statement GE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 82
    function_employ  go to state 22


State 52

   35 bool_statement: math_statement LT . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 83
    function_employ  go to state 22


State 53

   38 bool_statement: math_statement LE . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 84
    function_employ  go to state 22


State 54

   27 math_statement: math_statement SUB . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 85
    function_employ  go to state 22


State 55

   26 math_statement: math_statement ADD . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 86
    function_employ  go to state 22


State 56

   28 math_statement: math_statement MUL . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 87
    function_employ  go to state 22


State 57

   29 math_statement: math_statement DIV . math_statement

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 88
    function_employ  go to state 22


State 58

    6 line: math_statement '\n' .

    $default  reduce using rule 6 (line)


State 59

    8 line: bool_statement '\n' .

    $default  reduce using rule 8 (line)


State 60

   12 line: return_statement SEMICOLON . '\n'

    '\n'  shift, and go to state 89


State 61

   10 line: if_statement '\n' .

    $default  reduce using rule 10 (line)


State 62

    9 line: while_statement '\n' .

    $default  reduce using rule 9 (line)


State 63

   11 line: for_statement '\n' .

    $default  reduce using rule 11 (line)


State 64

   60 switchLines: switchLines '\n' .

    $default  reduce using rule 60 (switchLines)


State 65

   18 assign_statement: IDENTIFIER ASSIGN math_statement .
   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement . GT math_statement
   35               | math_statement . LT math_statement
   36               | math_statement . EQ math_statement
   37               | math_statement . GE math_statement
   38               | math_statement . LE math_statement
   39               | math_statement . NE math_statement

    EQ   shift, and go to state 48
    NE   shift, and go to state 49
    GT   shift, and go to state 50
    GE   shift, and go to state 51
    LT   shift, and go to state 52
    LE   shift, and go to state 53
    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 18 (assign_statement)


State 66

   20 assign_statement: IDENTIFIER ASSIGN bool_statement .

    $default  reduce using rule 20 (assign_statement)


State 67

   19 assign_statement: IDENTIFIER ASSIGN function_employ .
   25 math_statement: function_employ .

    SEMICOLON  reduce using rule 19 (assign_statement)
    SEMICOLON  [reduce using rule 25 (math_statement)]
    RP         reduce using rule 19 (assign_statement)
    RP         [reduce using rule 25 (math_statement)]
    $default   reduce using rule 25 (math_statement)


State 68

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement . GT math_statement
   35               | math_statement . LT math_statement
   36               | math_statement . EQ math_statement
   37               | math_statement . GE math_statement
   38               | math_statement . LE math_statement
   39               | math_statement . NE math_statement
   47 function_employ: IDENTIFIER LP math_statement . RP

    EQ   shift, and go to state 48
    NE   shift, and go to state 49
    GT   shift, and go to state 50
    GE   shift, and go to state 51
    LT   shift, and go to state 52
    LE   shift, and go to state 53
    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57
    RP   shift, and go to state 90


State 69

   48 function_employ: IDENTIFIER LP bool_statement . RP

    RP  shift, and go to state 91


State 70

   13 line: PRINT_T LP IDENTIFIER . RP SEMICOLON '\n'

    RP  shift, and go to state 92


State 71

   45 function_definition: FUNCTION IDENTIFIER LP . TypeForParam IDENTIFIER RP switchLines block
   46                    | FUNCTION IDENTIFIER LP . RP block

    INT_TYPE     shift, and go to state 93
    FLOAT_TYPE   shift, and go to state 94
    DOUBLE_TYPE  shift, and go to state 95
    BOOL_TYPE    shift, and go to state 96
    STRING_TYPE  shift, and go to state 97
    RP           shift, and go to state 98

    TypeForParam  go to state 99


State 72

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement . GT math_statement
   35               | math_statement . LT math_statement
   36               | math_statement . EQ math_statement
   37               | math_statement . GE math_statement
   38               | math_statement . LE math_statement
   39               | math_statement . NE math_statement

    EQ   shift, and go to state 48
    NE   shift, and go to state 49
    GT   shift, and go to state 50
    GE   shift, and go to state 51
    LT   shift, and go to state 52
    LE   shift, and go to state 53
    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57


State 73

   51 if_statement: IF LP bool_statement . RP switchLines block
   52             | IF LP bool_statement . RP switchLines block switchLines ELSE switchLines block
   53             | IF LP bool_statement . RP switchLines block switchLines elsif_list
   54             | IF LP bool_statement . RP switchLines block switchLines elsif_list switchLines ELSE switchLines block

    RP  shift, and go to state 100


State 74

   58 while_statement: WHILE LP bool_statement . RP switchLines block

    RP  shift, and go to state 101


State 75

   18 assign_statement: IDENTIFIER . ASSIGN math_statement
   19                 | IDENTIFIER . ASSIGN function_employ
   20                 | IDENTIFIER . ASSIGN bool_statement
   21                 | IDENTIFIER . INCREASE
   22                 | IDENTIFIER . DECREASE

    INCREASE  shift, and go to state 29
    DECREASE  shift, and go to state 30
    ASSIGN    shift, and go to state 31


State 76

   59 for_statement: FOR LP assign_statement . SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block

    SEMICOLON  shift, and go to state 102


State 77

   30 math_statement: LP math_statement RP .

    $default  reduce using rule 30 (math_statement)


State 78

    7 line: assign_statement SEMICOLON '\n' .

    $default  reduce using rule 7 (line)


State 79

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   36 bool_statement: math_statement EQ math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 36 (bool_statement)


State 80

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   39 bool_statement: math_statement NE math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 39 (bool_statement)


State 81

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   34 bool_statement: math_statement GT math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 34 (bool_statement)


State 82

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   37 bool_statement: math_statement GE math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 37 (bool_statement)


State 83

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   35 bool_statement: math_statement LT math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 35 (bool_statement)


State 84

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   38 bool_statement: math_statement LE math_statement .

    SUB  shift, and go to state 54
    ADD  shift, and go to state 55
    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 38 (bool_statement)


State 85

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   27               | math_statement SUB math_statement .
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement

    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 27 (math_statement)


State 86

   26 math_statement: math_statement . ADD math_statement
   26               | math_statement ADD math_statement .
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement

    MUL  shift, and go to state 56
    DIV  shift, and go to state 57

    $default  reduce using rule 26 (math_statement)


State 87

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   28               | math_statement MUL math_statement .
   29               | math_statement . DIV math_statement

    $default  reduce using rule 28 (math_statement)


State 88

   26 math_statement: math_statement . ADD math_statement
   27               | math_statement . SUB math_statement
   28               | math_statement . MUL math_statement
   29               | math_statement . DIV math_statement
   29               | math_statement DIV math_statement .

    $default  reduce using rule 29 (math_statement)


State 89

   12 line: return_statement SEMICOLON '\n' .

    $default  reduce using rule 12 (line)


State 90

   47 function_employ: IDENTIFIER LP math_statement RP .

    $default  reduce using rule 47 (function_employ)


State 91

   48 function_employ: IDENTIFIER LP bool_statement RP .

    $default  reduce using rule 48 (function_employ)


State 92

   13 line: PRINT_T LP IDENTIFIER RP . SEMICOLON '\n'

    SEMICOLON  shift, and go to state 103


State 93

   40 TypeForParam: INT_TYPE .

    $default  reduce using rule 40 (TypeForParam)


State 94

   41 TypeForParam: FLOAT_TYPE .

    $default  reduce using rule 41 (TypeForParam)


State 95

   42 TypeForParam: DOUBLE_TYPE .

    $default  reduce using rule 42 (TypeForParam)


State 96

   43 TypeForParam: BOOL_TYPE .

    $default  reduce using rule 43 (TypeForParam)


State 97

   44 TypeForParam: STRING_TYPE .

    $default  reduce using rule 44 (TypeForParam)


State 98

   46 function_definition: FUNCTION IDENTIFIER LP RP . block

    LC  shift, and go to state 104

    block  go to state 105


State 99

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam . IDENTIFIER RP switchLines block

    IDENTIFIER  shift, and go to state 106


State 100

   51 if_statement: IF LP bool_statement RP . switchLines block
   52             | IF LP bool_statement RP . switchLines block switchLines ELSE switchLines block
   53             | IF LP bool_statement RP . switchLines block switchLines elsif_list
   54             | IF LP bool_statement RP . switchLines block switchLines elsif_list switchLines ELSE switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 107


State 101

   58 while_statement: WHILE LP bool_statement RP . switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 108


State 102

   59 for_statement: FOR LP assign_statement SEMICOLON . bool_statement SEMICOLON assign_statement RP switchLines block

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 72
    bool_statement   go to state 109
    function_employ  go to state 22


State 103

   13 line: PRINT_T LP IDENTIFIER RP SEMICOLON . '\n'

    '\n'  shift, and go to state 110


State 104

   63 block: LC . lines RC
   64      | LC . RC

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    RC           shift, and go to state 111
    TRUE_T       shift, and go to state 11
    FALSE_T      shift, and go to state 12
    SUB          shift, and go to state 13
    LP           shift, and go to state 14
    '\n'         shift, and go to state 15

    error        [reduce using rule 62 (switchLines)]
    NUM          [reduce using rule 62 (switchLines)]
    IDENTIFIER   [reduce using rule 62 (switchLines)]
    "hello msg"  [reduce using rule 62 (switchLines)]
    PRINT_T      [reduce using rule 62 (switchLines)]
    IF           [reduce using rule 62 (switchLines)]
    WHILE        [reduce using rule 62 (switchLines)]
    FOR          [reduce using rule 62 (switchLines)]
    RETURN_T     [reduce using rule 62 (switchLines)]
    RC           [reduce using rule 62 (switchLines)]
    TRUE_T       [reduce using rule 62 (switchLines)]
    FALSE_T      [reduce using rule 62 (switchLines)]
    SUB          [reduce using rule 62 (switchLines)]
    LP           [reduce using rule 62 (switchLines)]
    '\n'         [reduce using rule 62 (switchLines)]

    line              go to state 112
    lines             go to state 113
    assign_statement  go to state 18
    math_statement    go to state 19
    bool_statement    go to state 20
    function_employ   go to state 22
    return_statement  go to state 23
    if_statement      go to state 24
    while_statement   go to state 25
    for_statement     go to state 26
    switchLines       go to state 27


State 105

   46 function_definition: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 46 (function_definition)


State 106

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER . RP switchLines block

    RP  shift, and go to state 114


State 107

   51 if_statement: IF LP bool_statement RP switchLines . block
   52             | IF LP bool_statement RP switchLines . block switchLines ELSE switchLines block
   53             | IF LP bool_statement RP switchLines . block switchLines elsif_list
   54             | IF LP bool_statement RP switchLines . block switchLines elsif_list switchLines ELSE switchLines block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 115


State 108

   58 while_statement: WHILE LP bool_statement RP switchLines . block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 116


State 109

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement . SEMICOLON assign_statement RP switchLines block

    SEMICOLON  shift, and go to state 117


State 110

   13 line: PRINT_T LP IDENTIFIER RP SEMICOLON '\n' .

    $default  reduce using rule 13 (line)


State 111

   64 block: LC RC .

    $default  reduce using rule 64 (block)


State 112

   16 lines: line .

    $default  reduce using rule 16 (lines)


State 113

   17 lines: lines . line
   63 block: LC lines . RC

    error        shift, and go to state 1
    NUM          shift, and go to state 2
    IDENTIFIER   shift, and go to state 3
    "hello msg"  shift, and go to state 4
    PRINT_T      shift, and go to state 5
    IF           shift, and go to state 7
    WHILE        shift, and go to state 8
    FOR          shift, and go to state 9
    RETURN_T     shift, and go to state 10
    RC           shift, and go to state 118
    TRUE_T       shift, and go to state 11
    FALSE_T      shift, and go to state 12
    SUB          shift, and go to state 13
    LP           shift, and go to state 14
    '\n'         shift, and go to state 15

    error        [reduce using rule 62 (switchLines)]
    NUM          [reduce using rule 62 (switchLines)]
    IDENTIFIER   [reduce using rule 62 (switchLines)]
    "hello msg"  [reduce using rule 62 (switchLines)]
    PRINT_T      [reduce using rule 62 (switchLines)]
    IF           [reduce using rule 62 (switchLines)]
    WHILE        [reduce using rule 62 (switchLines)]
    FOR          [reduce using rule 62 (switchLines)]
    RETURN_T     [reduce using rule 62 (switchLines)]
    RC           [reduce using rule 62 (switchLines)]
    TRUE_T       [reduce using rule 62 (switchLines)]
    FALSE_T      [reduce using rule 62 (switchLines)]
    SUB          [reduce using rule 62 (switchLines)]
    LP           [reduce using rule 62 (switchLines)]
    '\n'         [reduce using rule 62 (switchLines)]

    line              go to state 119
    assign_statement  go to state 18
    math_statement    go to state 19
    bool_statement    go to state 20
    function_employ   go to state 22
    return_statement  go to state 23
    if_statement      go to state 24
    while_statement   go to state 25
    for_statement     go to state 26
    switchLines       go to state 27


State 114

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP . switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 120


State 115

   51 if_statement: IF LP bool_statement RP switchLines block .
   52             | IF LP bool_statement RP switchLines block . switchLines ELSE switchLines block
   53             | IF LP bool_statement RP switchLines block . switchLines elsif_list
   54             | IF LP bool_statement RP switchLines block . switchLines elsif_list switchLines ELSE switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 51 (if_statement)]
    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 121


State 116

   58 while_statement: WHILE LP bool_statement RP switchLines block .

    $default  reduce using rule 58 (while_statement)


State 117

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON . assign_statement RP switchLines block

    IDENTIFIER  shift, and go to state 75

    assign_statement  go to state 122


State 118

   63 block: LC lines RC .

    $default  reduce using rule 63 (block)


State 119

   17 lines: lines line .

    $default  reduce using rule 17 (lines)


State 120

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines . block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 123


State 121

   52 if_statement: IF LP bool_statement RP switchLines block switchLines . ELSE switchLines block
   53             | IF LP bool_statement RP switchLines block switchLines . elsif_list
   54             | IF LP bool_statement RP switchLines block switchLines . elsif_list switchLines ELSE switchLines block
   60 switchLines: switchLines . '\n'

    ELSE   shift, and go to state 124
    ELSIF  shift, and go to state 125
    '\n'   shift, and go to state 64

    elsif_list  go to state 126
    elsif       go to state 127


State 122

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement . RP switchLines block

    RP  shift, and go to state 128


State 123

   45 function_definition: FUNCTION IDENTIFIER LP TypeForParam IDENTIFIER RP switchLines block .

    $default  reduce using rule 45 (function_definition)


State 124

   52 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE . switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 129


State 125

   57 elsif: ELSIF . LP bool_statement RP switchLines block switchLines

    LP  shift, and go to state 130


State 126

   53 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list .
   54             | IF LP bool_statement RP switchLines block switchLines elsif_list . switchLines ELSE switchLines block
   56 elsif_list: elsif_list . elsif

    ELSIF  shift, and go to state 125
    '\n'   shift, and go to state 15

    '\n'      [reduce using rule 53 (if_statement)]
    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    elsif        go to state 131
    switchLines  go to state 132


State 127

   55 elsif_list: elsif .

    $default  reduce using rule 55 (elsif_list)


State 128

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP . switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 133


State 129

   52 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE switchLines . block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 134


State 130

   57 elsif: ELSIF LP . bool_statement RP switchLines block switchLines

    NUM         shift, and go to state 2
    IDENTIFIER  shift, and go to state 39
    TRUE_T      shift, and go to state 11
    FALSE_T     shift, and go to state 12
    SUB         shift, and go to state 13
    LP          shift, and go to state 14

    math_statement   go to state 72
    bool_statement   go to state 135
    function_employ  go to state 22


State 131

   56 elsif_list: elsif_list elsif .

    $default  reduce using rule 56 (elsif_list)


State 132

   54 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines . ELSE switchLines block
   60 switchLines: switchLines . '\n'

    ELSE  shift, and go to state 136
    '\n'  shift, and go to state 64


State 133

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines . block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 137


State 134

   52 if_statement: IF LP bool_statement RP switchLines block switchLines ELSE switchLines block .

    $default  reduce using rule 52 (if_statement)


State 135

   57 elsif: ELSIF LP bool_statement . RP switchLines block switchLines

    RP  shift, and go to state 138


State 136

   54 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE . switchLines block

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 139


State 137

   59 for_statement: FOR LP assign_statement SEMICOLON bool_statement SEMICOLON assign_statement RP switchLines block .

    $default  reduce using rule 59 (for_statement)


State 138

   57 elsif: ELSIF LP bool_statement RP . switchLines block switchLines

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 140


State 139

   54 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines . block
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 141


State 140

   57 elsif: ELSIF LP bool_statement RP switchLines . block switchLines
   60 switchLines: switchLines . '\n'

    LC    shift, and go to state 104
    '\n'  shift, and go to state 64

    block  go to state 142


State 141

   54 if_statement: IF LP bool_statement RP switchLines block switchLines elsif_list switchLines ELSE switchLines block .

    $default  reduce using rule 54 (if_statement)


State 142

   57 elsif: ELSIF LP bool_statement RP switchLines block . switchLines

    '\n'  shift, and go to state 15

    '\n'      [reduce using rule 62 (switchLines)]
    $default  reduce using rule 62 (switchLines)

    switchLines  go to state 143


State 143

   57 elsif: ELSIF LP bool_statement RP switchLines block switchLines .
   60 switchLines: switchLines . '\n'

    '\n'  shift, and go to state 64

    '\n'      [reduce using rule 57 (elsif)]
    $default  reduce using rule 57 (elsif)
